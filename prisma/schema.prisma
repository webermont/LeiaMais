// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  loans        Loan[]
  fines        Fine[]
  reservations Reservation[]
}

model Book {
  id          String   @id @default(uuid())
  title       String
  author      String
  isbn        String   @unique
  quantity    Int
  available   Int
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category    Category     @relation(fields: [categoryId], references: [id])
  loans       Loan[]
  reservations Reservation[]
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  books     Book[]
}

model Loan {
  id        String    @id @default(uuid())
  userId    String
  bookId    String
  dueDate   DateTime
  returnDate DateTime?
  status    LoanStatus @default(ACTIVE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user      User      @relation(fields: [userId], references: [id])
  book      Book      @relation(fields: [bookId], references: [id])
  fine      Fine?
}

model Fine {
  id        String   @id @default(uuid())
  loanId    String   @unique
  userId    String
  amount    Float
  status    FineStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  loan      Loan     @relation(fields: [loanId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Reservation {
  id        String   @id @default(uuid())
  userId    String
  bookId    String
  status    ReservationStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum LoanStatus {
  ACTIVE
  RETURNED
  OVERDUE
}

enum FineStatus {
  PENDING
  PAID
}

enum ReservationStatus {
  PENDING
  FULFILLED
  CANCELLED
} 